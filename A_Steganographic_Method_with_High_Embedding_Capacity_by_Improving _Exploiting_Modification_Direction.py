
from PIL import Image
import math
import numpy as np


def E(n):
    return ((2 * n + 1) * math.log(2, 2 * n + 1)) / 2 * n


def R(n):
    return (math.log(2, 2 * n + 1)) / n


# Peak Signal-to-Noise Ratio
def psnr(img1, img2):
    img1 = np.array(Image.open(img1).convert('L')).astype(np.float64)
    img2 = np.array(Image.open(img2).convert('L')).astype(np.float64)
    mse = np.mean((img1 - img2) ** 2)
    if mse == 0:
        return 100
    else:
        return 20 * np.log10(255 / np.sqrt(mse))


def plus(string):
    # Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。

    return string.zfill(8)


def mod(x, y):
    return x % y


def get_key(n, str1, str2):  # 进制转换，str1=0 表示n进制转二进制，str=1 表示二进制转n进制 str2进制字符串
    s = ""
    if str1 == 0:
        i = int(str2, n)
        k = bin(i).replace('0b', '')
        s = str(k)
        print(str2, "\n", n, "进制转2进制：", s)
        return s
    elif str1 == 1:
        i = int(str2, 2)
        print("i=", i)
        while i > 0:
            k = i % n
            i = i // n
            s += str(k)
        print(str2, "二进制转n进制:", s[::-1], )
        return s[::-1]


# 隐藏函数
def func(str1, str2, str3):
    im2 = Image.open(str1)

    im = im2.convert('L')

    # 获取图片的宽和高

    width = im.size[0]

    print("width:" + str(width) + "\n")

    height = im.size[1]

    print("height:" + str(height) + "\n")

    count = 0

    # 获取需要隐藏的信息
    key = get_key(8, 1, str2)  # key是转8进制后的值
    # 隐藏信息长度
    keylen = len(key)
    print("len=", keylen)
    for h in range(0, height):

        for w in range(0, width, 2):
            p1 = im.getpixel((w, h))  # 第i位置的像数值
            p2 = im.getpixel((w + 1, h))  # 第i+1位置的像素值
            print("w", w, 'w+1', w + 1)
            if count == keylen:
                break

            if int(key[count]) == mod((p1 * 1 + p2 * 3), 8):
                count += 1
            elif int(key[count]) == mod(((p1 + 1) * 1 + p2 * 3), 8):
                p1 += 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            elif int(key[count]) == mod(((p1 - 1) * 1 + p2 * 3), 8):
                p1 -= 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            elif int(key[count]) == mod((p1 * 1 + (p2 + 1) * 3), 8):
                p2 += 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            elif int(key[count]) == mod((p1 * 1 + (p2 - 1) * 3), 8):
                p2 -= 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            elif int(key[count]) == mod(((p1 + 1) * 1 + (p2 + 1) * 3), 8):
                p1 += 1
                p2 += 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            elif int(key[count]) == mod(((p1 + 1) * 1 + (p2 - 1) * 3), 8):
                p1 += 1
                p2 -= 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            elif int(key[count]) == mod(((p1 - 1) * 1 + (p2 + 1) * 3), 8):
                p1 -= 1
                p2 += 1
                im.putpixel((w + 1, h), p2)
                im.putpixel((w, h), p1)
                count += 1
            print("count=", count)

        if count == keylen:
            break

    #  im.show()
    im.save(str3)


def func2(le, str1):
    im = Image.open(str1)
    width = im.size[0]
    height = im.size[1]
    str2 = ""
    count = 0
    for h in range(0, height):

        for w in range(0, width, 2):
            if count == le:
                break
            pixel1 = im.getpixel((w, h))  # 第i位置的像数值
            pixel2 = im.getpixel((w + 1, h))  # 第i+1位置的像素值
            # 计算f值
            f = mod((pixel1 * 1 + pixel2 * 2), 8)
            str2 += str(f)
            count += 1
            if count == le:
                print("str2=", str2)
                print("所求原二进制数据=", get_key(8, 0, str2))
                break


# 原图
old = "D:\programing\python\python-works\复现\lSb_matching_revisited\ocean.png"
# 处理后输出的图片路径
new = "D:\programing\python\python-works\复现\A_Steganographic_Method_with_High_Embedding_Capacity_by_Improving _Exploiting_Modification_Direction\Out_outPic\ocean_test.png"
# 需要隐藏的信息
enc = "D:\programing\python\python-works\复现\A_Steganographic_Method_with_High_Embedding_Capacity_by_Improving _Exploiting_Modification_Direction\隐藏信息.txt"

# get_key(8,1,'110101101001')

func(old, '110101101001', new)
print("psnr=", psnr(old, new))

func2(4, "D:\programing\python\python-works\复现\A_Steganographic_Method_with_High_Embedding_Capacity_by_Improving _Exploiting_Modification_Direction\Out_outPic\ocean_test1.png")
func2(4, "D:\programing\python\python-works\复现\A_Steganographic_Method_with_High_Embedding_Capacity_by_Improving _Exploiting_Modification_Direction\Out_outPic\\11.png")